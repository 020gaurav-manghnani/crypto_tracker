{"version":3,"sources":["Coin.js","App.js","serviceWorker.js","index.js"],"names":["Coin","name","price","symbol","image","percentage","rank","className","src","alt","toFixed","App","useState","coins","setCoins","search","setSearch","useEffect","axios","get","then","response","data","console","log","catch","error","alert","filteredCoins","filter","coin","toLowerCase","includes","type","onChange","e","target","value","placeholder","map","current_price","price_change_percentage_24h","market_cap_rank","id","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6374cf6a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Coin.css';\r\n\r\n\r\nconst Coin = ({\r\n  name,\r\n  price,\r\n  symbol,\r\n  image,\r\n  percentage,\r\n  rank\r\n}) => {\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className='row'>\r\n        <div className='coin'>\r\n          <img src={image} alt='crypto' />\r\n          <h1>{name}</h1>\r\n          <p className='symbol'>{symbol}</p>\r\n        </div>\r\n        <div className='data'>\r\n          <p className='price'>â‚¹{price}</p>\r\n          <p className='rank'>{rank}</p>\r\n           \r\n\r\n\r\n          {percentage < 0 ? (\r\n            <p className='coin-percent red'>{percentage.toFixed(2)}%</p> //agar 0 se kam hai to show in red\r\n          ) : (\r\n            <p className='coin-percent green'>{percentage.toFixed(2)}%</p> // agar 0 se jada hai to show in green\r\n          )}\r\n\r\n        \r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Coin;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport Coin from './Coin';\r\n\r\n\r\nfunction App() {\r\n  const [coins, setCoins] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  \r\n \r\n  useEffect(() => {\r\n    axios                        //axios.get se api call kiya hai\r\n      .get(\r\n        'https://api.coingecko.com/api/v3/coins/markets?vs_currency=inr&order=market_cap_desc&per_page=50&page=1&sparkline=false'\r\n      )\r\n      .then(response => {\r\n        setCoins(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch( error=> alert('bhagjaaaa'));            //checking for error\r\n  }, []);\r\n\r\n  const handleChange = e => {\r\n  console.log(e.target.value)\r\n    setSearch(e.target.value);                 //jo bhi content input box me aaega vo e me store hoga\r\n  };\r\n\r\n\r\n\r\n  const filteredCoins = coins.filter(coin =>\r\n    coin.name.toLowerCase().includes(search.toLowerCase()) //coins ko filter karke show karega\r\n  );\r\n\r\n  return (\r\n    <div className='app'>\r\n      <div className='search'>\r\n        \r\n        <h1 className='text'>Search a Coin</h1>\r\n      \r\n        <form>\r\n        \r\n      \r\n          <input\r\n            className='input'\r\n            type='text'\r\n            onChange={handleChange}  //type krte hi box me onchange call ho jaega\r\n            placeholder='Search'\r\n          />\r\n        </form>\r\n      </div>\r\n      {filteredCoins.map(coin => {\r\n        return (\r\n          <Coin\r\n            key={coin.id}\r\n            name={coin.name}\r\n            price={coin.current_price}\r\n            symbol={coin.symbol}\r\n            image={coin.image}\r\n            percentage={coin.price_change_percentage_24h}\r\n            rank={coin.market_cap_rank}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();"],"sourceRoot":""}